generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model appointment {
  AP_ID              Int              @id @default(autoincrement())
  AP_SUBJECT         String           @db.VarChar(100)
  AP_DESCRIPTION     String           @db.Text
  AP_LOCATION_NUMBER Int
  AP_TIME_START      DateTime         @db.DateTime(0)
  AP_TIME_END        DateTime         @db.DateTime(0)
  EM_FROM            Int
  room               room             @relation(fields: [AP_LOCATION_NUMBER], references: [R_NUMBER], onUpdate: Restrict, map: "appointment_ibfk_1")
  employee           employee         @relation(fields: [EM_FROM], references: [EM_ID], onUpdate: Restrict, map: "appointment_ibfk_2")
  appointment_to     appointment_to[]
  using_room         using_room[]

  @@index([AP_LOCATION_NUMBER], map: "AP_LOCATION_NUMBER")
  @@index([EM_FROM], map: "EM_FROM")
}

model appointment_to {
  AP_TO_ID    Int         @id @default(autoincrement())
  EM_ID       Int
  AP_ID       Int
  appointment appointment @relation(fields: [AP_ID], references: [AP_ID], onUpdate: Restrict, map: "appointment_to_ibfk_1")
  employee    employee    @relation(fields: [EM_ID], references: [EM_ID], onUpdate: Restrict, map: "appointment_to_ibfk_2")

  @@index([AP_ID], map: "AP_ID")
  @@index([EM_ID], map: "EM_ID")
}

model department {
  DP_ID    Int        @id @default(autoincrement())
  DP_NAME  String     @db.VarChar(100)
  employee employee[]
}

model employee {
  EM_ID           Int               @id @default(autoincrement())
  EM_FNAME        String            @db.VarChar(100)
  EM_LNAME        String            @db.VarChar(100)
  EM_ADDRESS      String            @db.Text
  EM_GENDER       String            @db.VarChar(6)
  EM_TEL          String            @db.Char(10)
  EM_BRITHDAY     DateTime          @db.Date
  DP_ID           Int
  P_ID            Int
  EM_SALARY       Float
  EM_HIRE_DATE    DateTime          @db.Date
  EM_IMAGE        Bytes
  EM_CHANGE_AT    DateTime          @default(now()) @db.Timestamp(0)
  EM_IS_ACTIVARE  Boolean           @default(true)
  department      department        @relation(fields: [DP_ID], references: [DP_ID], onUpdate: Restrict, map: "employee_ibfk_1")
  position        position          @relation(fields: [P_ID], references: [P_ID], onUpdate: Restrict, map: "employee_ibfk_2")
  appointment     appointment[]
  appointment_to  appointment_to[]
  leave_work      leave_work[]
  pay_salary      pay_salary[]
  work_time_check work_time_check[]

  @@index([DP_ID], map: "DP_ID")
  @@index([P_ID], map: "P_ID")
}

model leave_work {
  L_ID     Int      @id @default(autoincrement())
  EM_ID    Int
  L_DATE   DateTime @db.Date
  L_NOTE   String   @db.Text
  L_STATUS String   @default("p") @db.Char(1)
  L_IMAGE  Bytes
  employee employee @relation(fields: [EM_ID], references: [EM_ID], onUpdate: Restrict, map: "leave_work_ibfk_1")

  @@index([EM_ID], map: "EM_ID")
}

model pay_salary {
  PY_ID    Int      @id @default(autoincrement())
  EM_ID    Int
  PY_DATE  DateTime @default(now()) @db.Timestamp(0)
  PY_SSO   Float
  PY_TAX   Float
  PY_TOTAL Float
  employee employee @relation(fields: [EM_ID], references: [EM_ID], onUpdate: Restrict, map: "pay_salary_ibfk_1")

  @@index([EM_ID], map: "EM_ID")
}

model position {
  P_ID     Int        @id @default(autoincrement())
  P_NAME   String     @db.VarChar(50)
  employee employee[]
}

model room {
  R_NUMBER                               Int           @id @default(autoincrement())
  R_NAME                                 String        @db.VarChar(100)
  R_USING_ID                             Int?
  using_room_room_R_USING_IDTousing_room using_room?   @relation("room_R_USING_IDTousing_room", fields: [R_USING_ID], references: [USE_ID], onDelete: Restrict, onUpdate: Restrict, map: "room_ibfk_1")
  appointment                            appointment[]
  using_room_roomTousing_room_R_ID       using_room[]  @relation("roomTousing_room_R_ID")

  @@index([R_USING_ID], map: "R_USING_ID")
}

model using_room {
  USE_ID                           Int         @id @default(autoincrement())
  R_ID                             Int
  AP_ID                            Int
  room_roomTousing_room_R_ID       room        @relation("roomTousing_room_R_ID", fields: [R_ID], references: [R_NUMBER], onUpdate: Restrict, map: "using_room_ibfk_1")
  appointment                      appointment @relation(fields: [AP_ID], references: [AP_ID], onUpdate: Restrict, map: "using_room_ibfk_2")
  room_room_R_USING_IDTousing_room room[]      @relation("room_R_USING_IDTousing_room")

  @@index([AP_ID], map: "AP_ID")
  @@index([R_ID], map: "R_ID")
}

model work_time_check {
  WT_ID    Int       @id @default(autoincrement())
  EM_ID    Int
  DATE     DateTime  @db.Date
  IN_AT    DateTime  @default(now()) @db.Timestamp(0)
  OUT_AT   DateTime? @db.Timestamp(0)
  IS_LATE  Boolean
  employee employee  @relation(fields: [EM_ID], references: [EM_ID], onUpdate: Restrict, map: "work_time_check_ibfk_1")

  @@index([EM_ID], map: "EM_ID")
}
